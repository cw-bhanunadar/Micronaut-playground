plugins {
    id("org.jetbrains.kotlin.jvm") version "1.8.22"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.8.22"
    id("com.google.devtools.ksp") version "1.8.22-1.0.11"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.0.2"
    id("io.micronaut.aot") version "4.0.2"
}

apply plugin: 'kotlin-kapt'
version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}
dependencies {
    kapt('io.micronaut:micronaut-http-validation:3.4.3')
    kapt("io.micronaut.data:micronaut-data-processor:3.3.0")

    implementation('io.micronaut:micronaut-jackson-databind:3.4.3')
    implementation('io.micronaut:micronaut-runtime:3.4.3')
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:3.2.2")
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.6.1')
    implementation('io.zipkin.brave:brave-context-slf4j:5.13.9')
    implementation 'io.sentry:sentry:5.7.4'
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation('io.micronaut.sql:micronaut-jdbc-hikari:4.3.0')
    implementation("io.micronaut.data:micronaut-data-jdbc")
    runtimeOnly("org.postgresql:postgresql")


    runtimeOnly("org.yaml:snakeyaml")
    implementation("ch.qos.logback:logback-classic")

    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("org.thymeleaf:thymeleaf")

    implementation 'org.jsoup:jsoup:1.15.1'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'

    implementation('io.swagger.core.v3:swagger-annotations:2.2.8')
    kapt('io.micronaut.openapi:micronaut-openapi:4.8.5')
}


application {
    mainClass.set("com.example.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
}

tasks {
    compileKotlin {
        compilerOptions {
           jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
        }
    }
    compileTestKotlin {
        compilerOptions {
           jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
        }
    }

}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
}
tasks.withType(Jar).all { duplicatesStrategy 'exclude' }

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}